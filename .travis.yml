sudo: required
language: java
jdk:
  - openjdk8
env:
  global:
    - IMAGE_NAME=bluecompute-customer
    - RELEASE_NAME=customer
    - TAG=travis-latest
    - HS256_KEY=E6526VJkKYhyTFRFMC0pTECpHcZ7TGcq8pKsVVgz9KtESVpheEO284qKzfzg8HpWNBPeHOxNGlyudUHi6i8tFQJXC8PiI48RUpMh23vPDLGD35pCM0417gf58z5xlmRNii56fwRCmIhhV7hDsm3KO2jRv4EBVz7HrYbzFeqI45CaStkMYNipzSm2duuer7zRdMjEKIdqsby0JfpQpykHmC5L6hxkX0BT7XWqztTr6xHCwqst26O0g8r7bXSYjp4a
    - COUCHDB_USER=admin
    - COUCHDB_PASSWORD=passw0rd
    - TEST_USER=testuser
    - TEST_PASSWORD=passw0rd
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Start CouchDB 2.1.2 and wait for it to start
      # Using this instead of built-in couchdb, which is 1.6.1
      - docker run --name couchdb -p 5984:5984 -e COUCHDB_USER=${COUCHDB_USER} -e COUCHDB_PASSWORD=${COUCHDB_PASSWORD} -d couchdb:2.1.2
      # Wait for CouchDB to Start
      - sleep 20
      # Test CouchDB
      - curl http://127.0.0.1:5984
      script:
      # Gradle Build
      - ./gradlew build -x test
      # Start Application
      - java -Deureka.client.fetchRegistry=false -Deureka.client.registerWithEureka=false -Djwt.sharedSecret=${HS256_KEY} -jar build/libs/micro-customer-0.0.1.jar &
      # Wait for the Customer container to start accepting connections
      - sleep 25
      # Run Customer API Test
      - bash scripts/api_tests.sh 127.0.0.1 8080 $HS256_KEY $TEST_USER $TEST_PASSWORD
    - stage: docker build, deploy, and test
      services:
      - docker
      install:
        - true
      before_script:
      # Start CouchDB 2.1.2 and wait for it to start
      # Using this instead of built-in couchdb, which is 1.6.1
      - docker run --name couchdb -p 5984:5984 -e COUCHDB_USER=${COUCHDB_USER} -e COUCHDB_PASSWORD=${COUCHDB_PASSWORD} -d couchdb:2.1.2
      # Wait for CouchDB to Start
      - sleep 20
      # Test CouchDB
      - curl http://127.0.0.1:5984
      # Get IP Address for CouchDB
      - COUCHDB_IP=$(docker inspect couchdb | jq -r '.[0].NetworkSettings.IPAddress')
      #- docker inspect couchdb | jq -r '.[0].NetworkSettings.IPAddress'
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Customer Container and Connect to local MySQL Service
      - docker run --net=host --name customer -d -p 8080:8080 -e HS256_KEY=${HS256_KEY} -e COUCHDB_URI="http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@${COUCHDB_IP}:5984" "${IMAGE_NAME}:${TAG}"
      # Wait for the Customer container to start accepting connections
      - sleep 25
      # Check that the Customer container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs customer
      # Run Customer API Test
      - bash scripts/api_tests.sh 127.0.0.1 8080 $HS256_KEY $TEST_USER $TEST_PASSWORD
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      - CHANGE_MINIKUBE_NONE_USER=true
      install:
        - true
      before_script:
      # Install nsenter, which is needed for minikube to work
      - bash scripts/install_minikube_and_helm.sh
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Download Customer chart dependencies (MySQL)
      - cd chart/customer; helm dependency update; cd ../..
      # helm lint
      - helm lint chart/customer
      # helm package
      - helm package chart/customer
      # helm install Customer from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/customer/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install customer --set service.type=NodePort,testUser.createUser=false,image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never customer-${CHART_VERSION}.tgz
      # Wait for Customer to be ready
      - kubectl get deployments ${RELEASE_NAME}-customer -o yaml
      - READY=$(kubectl get deployments ${RELEASE_NAME}-customer -o yaml | grep "readyReplicas" | awk '{print $2}')
      - echo $READY
      - until [ -n "$READY" ] && [ ${READY} -ge 1 ]; do READY=$(kubectl get deployments ${RELEASE_NAME}-customer -o yaml | grep "readyReplicas" | awk '{print $2}'); kubectl get deployments -o wide; echo "Waiting for customer to be ready"; sleep 10; done
      # Wait for Customer deployment to start accepting connections
      - sleep 35
      # Run Customer API Test
      - MINIKUBE_IP=$(minikube ip)
      - NODE_PORT=$(kubectl get service ${RELEASE_NAME}-customer -o=jsonpath='{.spec.ports[0].nodePort}')
      - bash scripts/api_tests.sh $MINIKUBE_IP $NODE_PORT $HS256_KEY $TEST_USER $TEST_PASSWORD